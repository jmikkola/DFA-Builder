package com.jeremymikkola.dfabuilder;

import java.io.PrintStream;
import java.util.*;

/**
 * This is a simple class used to print out the resulting C++ program.
 * This class is almost entirely string formatting logic. 
 * @version 2010.10.20 
 * @author Jeremy Mikkola
 */
public class ProgramBuilder {

    private char[] letters;
    private int[][] table;
    private String[] words;
    private TreeMap<String, Node> incrementStates;
    private PrintStream out;

    private static final String INDENT = "    ";

    /**
     * Creates a new ProgramBuilder that writes to System.out
     * @param st The StringTree to create a program based on
     */
    public ProgramBuilder(StringTree st) {
        this(st, new PrintStream(System.out));
    }

    /**
     * Creates a new ProgramBuilder that writes to out
     * @param st The StringTree to create a program based on
     * @param out Where the program will be written
     */
    public ProgramBuilder(StringTree st, PrintStream out) {
        this.out = out;
        
        // Get unique letters
        TreeSet<Character> uniqueLetters = st.uniqueLetters();
        int numLetters = uniqueLetters.size();
        letters = new char[numLetters];
        Iterator<Character> letterIt = uniqueLetters.iterator();
        for (int i = 0; i < numLetters; i++) {
            letters[i] = letterIt.next();
        }

        // Get increment states
        incrementStates = st.getIncrements();

        // Get words
        words = st.getWords();

        // Get the transition table
        table = st.transitionTable();
    }

    /**
     * Call to write the program. 
     */
    public void printProgram() {
        printHeader();
        out.println();

        printTable();
        out.println();

        printMain();
        out.println();
        
        printGetCol();
        out.println();
    }

    private void printHeader() {
        int end;
        out.println("// Finite State Machine word counter");

        out.print("// Counts the words ");
        end = words.length - 1;
        for (int i = 0; i < end; i++)
            out.print(words[i] + ", ");
        out.println("and " + words[end] + ".");

        out.print("// Creation date: ");
        Date now = new Date();
        out.println(now.toString());
        out.println("// Autogenerated by dfaBuilder.");

        out.println("");
        out.println("#include <iostream>");
        out.println("using namespace std;");
        out.println("");
        out.println("int getCol(char ch);");
    }

    private void printTable() {
        out.println("// Transition table:");
        out.printf("const int table[%d][%d] = {\n",
                table.length, table[0].length);

        // Print the letters
        out.print("//  {");
        for (char c : letters)
            out.printf(" %c, ", c);
        out.println("~ }");

        int rowend = table.length - 1, colend = table[0].length - 1;
        // TODO: Clean this up
        for (int i = 0; i < rowend; i++) {
            printIndent(1);
            out.print("{");
            for (int j = 0; j < colend; j++) {
                out.printf("%2d, ", table[i][j]);
            }
            out.printf("%2d},  // State %d\n", table[i][colend], i);
        }
        printIndent(1);
        out.print("{");
        for (int j = 0; j < colend; j++) {
            out.printf("%2d, ", table[rowend][j]);
        }
        out.printf("%2d}}; // State %d\n", table[rowend][colend], rowend);
    }

    private void printMain() {
        out.println("int main(void) {");
        out.println();
        printVars();
        out.println();
        printMainloop();
        out.println();
        printCounts();
        out.println("}");
    }

    private void printVars() {
        printIndent(1);
        out.println("char ch;");
        printIndent(1);
        out.println("int state = 0,");
        int end = words.length - 1;
        for (int i = 0; i < end; i++) {
            printIndent(2);
            out.println(words[i] + "Count = 0,");
        }
        printIndent(2);
        out.println(words[end] + "Count = 0;");
    }

    private void printMainloop() {
        printIndent(1);
        out.println("// Main loop, runs the DFA");

        printIndent(1);
        out.println("while ( cin.get(ch) ) {");

        printIndent(2);
        out.println("state = table[state][ getCol(ch) ];");

        out.println();

        Set<String> set = incrementStates.navigableKeySet();
        Iterator<String> it = set.iterator();

        String word = it.next();
        printIndent(2);
        out.printf("if (state == %d)\n", incrementStates.get(word).id());
        printIndent(3);
        out.println(word + "Count++;");
        for (int i = 1; i < words.length; i++) {
            word = it.next();
            printIndent(2);
            out.printf("else if (state == %d)\n",
                    incrementStates.get(word).id());
            printIndent(3);
            out.println(word + "Count++;");
        }

        // End of while loop
        printIndent(1);
        out.println("}");
    }

    private void printCounts() {
        printIndent(1);
        out.println("// Print the results");

        printIndent(1);
        out.println("cout << \"\\nOccurance counts: \" << endl;");
        for (String word : words) {
            printIndent(1);
            out.printf("cout << \"%s: \" << %sCount << endl; \n",
                    word, word);
        }
        printIndent(1);
        out.println("cout << endl;");
        out.println();
        printIndent(1);
        out.println("return 0;");
    }

    private void printGetCol() {
        out.println("int getCol(char ch) {");

        // Switch statement
        printIndent(1);
        out.println("switch (ch) {");
        int i = 0;
        for (char c : letters) {
            printIndent(2);
            out.printf("case '%c': ", c);
            out.printf("return %d;\n", i++);
        }
        printIndent(1);
        out.println("}");

        printIndent(1);
        out.printf("return %d;\n", table[0].length - 1);

        out.println("}");
    }

    private void printIndent(int indent) {
        for (int i = 0; i < indent; i++)
            out.print(INDENT);
    }

}
